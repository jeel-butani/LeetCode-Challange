515. Find Largest Value in Each Tree Row

Problem Statement:

~ Given a binary tree, and you need to find the largest value in each level (row) of the tree. The result should be a list of integers where each integer represents the maximum value in a level of the tree.
~ Implement the largestValues method to find and return a list of the largest values in each row of the tree.

Intuition:

~ To find the largest values in each row of a binary tree, you can perform a level order traversal of the tree. You'll use a queue to traverse the tree level by level and keep track of the maximum value in each level as you traverse. In the end, you'll have a list of the maximum values for each row.

Approach:

~ Create a queue (q) to perform a level order traversal of the binary tree.
~ Create two lists, l and b. l will store the final result (maximum values in each row), and b will store the maximum values for the current row.
~ Check if the root is null. If it is, return an empty list since there are no rows to process.
~ Call the level method to perform the level order traversal, starting from the root node.
~ Inside the level method:
  ~ Initialize a variable p with the current root.
  ~ Add the p to the q queue to begin the traversal.
  ~ While the q queue is not empty:
    ~ Get the number of nodes in the current level by checking the size of the queue (n).
    ~ Iterate through the nodes in the current level using a for loop.
    ~ Remove the first node from the queue (p) and add its value to the b list.
    ~ If the left child of p is not null, add it to the queue.
    ~ If the right child of p is not null, add it to the queue.
  ~ After processing all nodes in the current level, find the maximum value in the b list using Collections.max(b), and add it to the l list to store the maximum value for that row.
  ~ Reset the b list to an empty list to prepare for the next row.
~ Once the level order traversal is complete, return the l list, which contains the maximum values for each row.

Complexity Analysis:

Time complexity: O(N), where N is the number of nodes in the binary tree. This is because we visit each node once during the level order traversal.
Space complexity: O(M), where M is the maximum number of nodes at any level in the tree. This is the space used by the queue for the level order traversal. In the worst case, M can be the number of leaf nodes at the last level of the tree.
