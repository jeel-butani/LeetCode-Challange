2265. Count Nodes Equal to Average of Subtree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Problem Statement:

Given a binary tree, and for each node in the tree, need to count the number of nodes in its subtree whose values are equal to the average of the values in that subtree.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Approach:

Definition of the helper Function:
~ The code defines a recursive function named helper that takes a binary tree node root as an input.
~ The helper function returns an integer array of size 3. The three elements of the array represent:
  ~ sum: The sum of values in the subtree rooted at root.
  ~ count: The count of nodes in the subtree rooted at root.
  ~ result: The count of nodes in the subtree whose values are equal to the average of the subtree.

Main Function averageOfSubtree:
~ The averageOfSubtree function is the entry point to the algorithm. It takes the root of the binary tree as input and returns the result of the helper function, specifically the third element of the returned array.

Recursive Calculation Using helper Function:
~ The helper function starts with a base case where, if the root is null, it returns an array [0, 0, 0] because there are no values in the subtree.
~ For non-null nodes, the helper function:
  ~ Recursively calls itself on the left and right subtrees, obtaining the sum, count, and result for each subtree.
  ~ Calculates the sum of values in the current subtree by summing the values of the left and right subtrees along with the current node's value.
  ~ Updates the count of nodes in the current subtree by summing the counts of nodes in the left and right subtrees and adding 1 for the current node.
  ~ Calculates the result for the current subtree by checking if the average of the current subtree (sum / count) is equal to the value of the current node. If it is equal, it increments the result by 1;             otherwise, it remains the same.

Return Result:
~ The averageOfSubtree function returns the third element (result) of the array returned by the helper function for the root node.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Complexity Analysis:

Time Complexity: The time complexity of this algorithm is O(n), where n is the number of nodes in the binary tree. This is because each node is visited once during the recursive traversal.
Space Complexity: The space complexity is O(h), where h is the height of the binary tree. This space is used for the recursive call stack. In the worst case, for a skewed tree, the space complexity is O(n), but for a balanced tree, it is O(log n).
