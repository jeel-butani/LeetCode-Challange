Problem 746 - Min Cost Climbing Stairs :

Problem Statement:

You are given an array cost where cost[i] is the cost of climbing a staircase to the ith step. 
You can start from either step 0 or step 1. Return the minimum cost to reach the top of the floor. 
You can either climb one or two steps at a time.

Intuition:

To find the minimum cost to reach the top of the stairs, we can work our way from the bottom to the 
top, finding the minimum cost to reach each step. Starting from the last step, we can reach it from 
the last two steps, and so on. We can use dynamic programming to solve this problem, specifically a 
bottom-up approach.

Approach:

Add a 0 to the end of the cost array.
Iterate from the second-to-last element to the first element.
For each step, add the minimum cost of reaching the next two steps to the current step.
Return the minimum cost of the first two steps.
Complexity:

Time complexity: O(n)
Space complexity: O(1)

C++ Code:

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        cost.push_back(0);
        for (int i = cost.size() - 3; i >= 0; --i) {
            cost[i] += min(cost[i + 1], cost[i + 2]);
        }
        return min(cost[0], cost[1]);
    }
};
