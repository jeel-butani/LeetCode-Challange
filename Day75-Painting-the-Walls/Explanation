# 2742. Painting the Walls:

<h3>Problem Statement:<>

You are given a row of walls to paint, where each wall has a cost associated with painting it and a time it takes to paint it. You can start from either end of the row and paint one wall at a time, moving towards the other end. However, there is a constraint on the maximum time you have to complete the painting.

Your task is to find the minimum cost of painting all the walls while respecting the time constraint.

Intuition:

To find the minimum cost of painting the walls with the given time constraint, we can use dynamic programming to explore all possible choices at each wall and select the one that minimizes the cost. We'll maintain a state of our progress along the row of walls and the remaining time. We start from one end and move towards the other end while making decisions at each step.

Approach:

1. Create a cache to store the minimum cost for each state, where a state is defined by the wall index and the remaining time.
2. Implement a recursive function, dp(i, t), where i is the current wall index and t is the remaining time. This function returns the minimum cost to paint the remaining walls starting from wall i with time t.
3. In the dp function:
  ~If we have reached the end of the row (i == n), return 0 if there is non-negative time remaining (t >= 0), indicating we've completed within the time constraint. Otherwise, return a large value (1e9) to indicate this path is invalid.
  ~If the result for the current state is already cached, return it.
  ~Otherwise, compute the minimum cost for the current state. We have two choices:
    ~Move to the next wall with reduced time: dp(i + 1, t - 1)
    ~Paint the current wall and move to the next wall with adjusted time: cost[i] + dp(i + 1, min(t + time[i], n))
  ~Cache the result for the current state and return it.
4. Call the dp function with the initial state (i=0, t=0) to start the computation.
5. The minimum cost of painting all walls will be the result of dp(0, 0).

Complexity:

Time complexity: O(n^2) due to the recursion and caching.
Space complexity: O(n^2) for the cache.
